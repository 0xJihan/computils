{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>Computils is an Android library designed to streamline the development process by offering a collection of predefined composable components, customizable UI elements, and utility packages. It aims to reduce boilerplate code, improve productivity, and allow developers to focus on building features rather than dealing with repetitive tasks.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Predefined Composable Components: A set of ready-to-use composable UI components for rapid development.</li> <li>Customizable: Easily tweak components to fit your app's design and requirements.</li> <li>Utility Packages: A set of helpful utility functions to simplify everyday tasks and reduce boilerplate.</li> <li>Extension Functions: Convenient extension functions to enhance your app\u2019s functionality and improve code readability.</li> <li>Easy to Use: Intuitive API design, enabling quick integration into any project with minimal setup.</li> <li>Less Boilerplate: Focus on writing less code while maintaining high-quality, reusable components.</li> </ul>"},{"location":"#why-use-computils","title":"Why Use Computils?","text":"<ul> <li>Speed: Get your app up and running faster with reusable, customizable components.</li> <li>Consistency: Consistent, high-quality UI elements that match Android design guidelines.</li> <li>Maintainability: Reduces complexity and boilerplate, making it easier to maintain and scale your codebase.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To include Computils in your project, simply add the following to your <code>build.gradle</code>:</p> <p>Add the dependency below to your module's <code>build.gradle</code> (app) file: <pre><code>implementation(\"com.github.0xJihan:computils:$latestVersion\")\n</code></pre></p> <p>Add this in Setting.gradle <pre><code> repositories {\n        maven(\"https://jitpack.io\")\n    }\n</code></pre></p>"},{"location":"Usage/","title":"Usage","text":""},{"location":"Usage/#gap","title":"Gap","text":"<pre><code>Column {\n    Text(\"Compose Utils\")\n    Gap(30) // 30dp gap vertically\n    Text(\"Hi, there\")\n}\n\nRow {\n    Text(\"Compose Utils\")\n    Gap(30) // 30dp gap horizontally\n    Text(\"Hi, there\")\n}\n</code></pre>"},{"location":"Usage/#text","title":"text","text":"<pre><code>    val context = LocalContext.current\n    var loading by remember { mutableStateOf(false) }\n\n    CxButton(loading = loading) { //Do something }\n\n    CxElevatedButton(\"Elevated Button\") { loading=true}\n\n    CxOutlinedButton(\"Outlined Button\") { loading=false}\n\n    CxTextButton(\"Text Button\", loading = loading,\n        onLoadingContent = {\n            \"Loading...\".text.make()\n        }) {\n        \"Button Clicked\".toast(context)\n    }\n</code></pre>"},{"location":"Usage/#cxbutton","title":"CxButton","text":"CxButton.kt<pre><code>    val context = LocalContext.current\n    var loading by remember { mutableStateOf(false) }\n\n    CxButton(loading = loading) { //Do something }\n\n    CxElevatedButton(\"Elevated Button\") { loading=true}\n\n    CxOutlinedButton(\"Outlined Button\") { loading=false}\n\n    CxTextButton(\"Text Button\", loading = loading,\n        onLoadingContent = {\n            \"Loading...\".text.make()\n        }) {\n        \"Button Clicked\".toast(context)\n    }\n</code></pre>"},{"location":"Usage/#cxblurredtext","title":"CxBlurredText","text":"CxBlurredText.kt<pre><code>Column {\n\n    CxBlurredText(\"Hello World, I am Jihan. and I am a Software developer\")\n        Gap(20)\n        CxBlurredText(\"And this is an example of a CxBlurredText text\",\n            TextStyle(\n                fontSize = 24.sp,\n                color = Cx.blue300,\n                letterSpacing = 2.sp,\n                lineHeight = 30.sp,\n                fontFamily = FontFamily.Serif,\n                fontWeight = FontWeight.Bold,\n                shadow = Shadow(\n                    color = Cx.blue700,\n                    blurRadius = 5f\n                )\n\n            )\n        )\n    }\n</code></pre>"},{"location":"Usage/#cxsegmentedbutton","title":"CxSegmentedButton","text":"<pre><code>    var cx1 by remember { mutableIntStateOf(0) }\n         CxSegmentedButton(\n             buttonArray = listOf(\"Option 1\", \"Option 2\", \"Option 3\"),\n             currentItem = cx1,\n             title = \"Segmented Button\",\n             onSegmentSelected = {\n                 cx1 = it\n             }\n         )\n</code></pre>"},{"location":"Usage/#cxsnackbar","title":"CxSnackBar","text":"<pre><code>     val topSnackBarState = rememberCxSnackBarState()\n    val bottomSnackBarState = remember{\n        CxSnackBarState()\n    }\n    val floatingSnackBarState = remember{\n        CxSnackBarState()\n    }\n\n    Surface(\n        modifier = Modifier.fillMaxSize(),\n        color = Color.White\n    ) {\n\n        Column(\n            modifier = Modifier.fillMaxSize(),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Button(\n                colors = ButtonDefaults.buttonColors(\n                    containerColor = Color(0xFF4579FF)\n                ),\n                onClick = { topSnackBarState.addMessage(\"This is a Top SnackBar\") }\n            ) {\n                Text(text = \"Top SnackBar\")\n            }\n\n            Button(\n                colors = ButtonDefaults.buttonColors(\n                    containerColor = Color(0xFF4579FF)\n                ),\n                onClick = { bottomSnackBarState.addMessage(\"This is a Bottom SnackBar\") }\n            ) {\n                Text(text = \"Bottom SnackBar\")\n            }\n\n            Button(\n                colors = ButtonDefaults.buttonColors(\n                    containerColor = Color(0xFF4579FF)\n                ),\n                onClick = { floatingSnackBarState.addMessage(\"This is a Floating SnackBar\") }\n            ) {\n                Text(text = \"Floating SnackBar\")\n            }\n        }\n\n        CxSnackBar(\n            state = topSnackBarState,\n            duration = 3000L,\n            backgroundColor = Color(0xFF18B661),\n            iconColor = Color(0xFFEEEEEE),\n            iconSize = 28.dp,\n            position = CxSnackBarPosition.Top,\n            verticalPadding = 16.dp,\n            horizontalPadding = 12.dp,\n            iconRes = lucide.check, // Replace with your image\n            enterAnimation = expandVertically(\n                animationSpec = tween(delayMillis = 300),\n                expandFrom = Alignment.Top\n            ),\n            exitAnimation = shrinkVertically(\n                animationSpec = tween(delayMillis = 300),\n                shrinkTowards = Alignment.Top\n            ),\n            textStyle = TextStyle(\n                color = Color.White,\n                fontFamily = FontFamily.SansSerif,\n                fontWeight = FontWeight.W500,\n                fontSize = 16.sp\n            )\n        )\n\n        CxSnackBar(\n            state = bottomSnackBarState,\n            duration = 3000L,\n            position = CxSnackBarPosition.Bottom,\n            backgroundColor = Color(0xFFE85039),\n            iconColor = Color(0xFFEEEEEE),\n            iconSize = 28.dp,\n            verticalPadding = 16.dp,\n            horizontalPadding = 12.dp,\n            iconRes = lucide.circle_check, // Replace with your image\n            enterAnimation = expandVertically(\n                animationSpec = tween(delayMillis = 300),\n                expandFrom = Alignment.Bottom\n            ),\n            exitAnimation = shrinkVertically(\n                animationSpec = tween(delayMillis = 300),\n                shrinkTowards = Alignment.Bottom\n            ),\n            textStyle = TextStyle(\n                color = Color.White,\n                fontFamily = FontFamily.SansSerif,\n                fontWeight = FontWeight.W500,\n                fontSize = 16.sp\n            )\n        )\n\n        CxSnackBar(\n            state = floatingSnackBarState,\n            position = CxSnackBarPosition.Float,\n            duration = 3000L,\n            iconRes = lucide.check, // Replace with your image\n            backgroundColor = Color(0xFF69C3EB),\n            iconColor = Color.White,\n            iconSize = 28.dp,\n            enterAnimation = fadeIn(),\n            exitAnimation = fadeOut(),\n            textStyle = TextStyle(\n                color = Color.White,\n                fontFamily = FontFamily.SansSerif,\n                fontWeight = FontWeight.W500,\n                fontSize = 16.sp\n            ),\n            verticalPadding = 16.dp,\n            horizontalPadding = 12.dp\n        )\n    }\n</code></pre>"},{"location":"Usage/#cxswinganimation","title":"CxSwingAnimation","text":"<pre><code>@Composable\nfun SwingAnimationDemo() {\n    CxSwingAnimation(\n        modifier = Modifier\n            .background(color = Color(0XFF1c8bd2))\n            .size(width = 220.dp, height = 195.dp),\n        boardImage =  Icons.Default.AccountBox,\n        textContent = {\n            Column(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(\n                        start = 10.dp, top = 90.dp, end = 10.dp\n                    ),\n                verticalArrangement = Arrangement.Center,\n                horizontalAlignment = Alignment.CenterHorizontally,\n            ) {\n                Text(\n                    text = \"Opening\",\n                    color = Color(0XFFFF3749),\n                    fontSize = 14.sp,\n                    textAlign = TextAlign.Center,\n                    fontWeight = FontWeight.Medium,\n                    fontStyle = FontStyle.Normal\n                )\n                Text(\n                    text = \"SOON!\",\n                    color = Color(0XFF111111),\n                    fontSize = 29.sp,\n                    textAlign = TextAlign.Center,\n                    fontWeight = FontWeight.Bold,\n                    fontStyle = FontStyle.Normal,\n                )\n            }\n        },\n        yOffset = (-28).dp,\n        angleOffset = 3f\n    )\n}\n</code></pre>"},{"location":"Usage/#cxwheeltimepicker","title":"CxWheelTimePicker","text":"<pre><code> @RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun WheelTimePickerDemo() {\n    var showSheet by remember { mutableStateOf(false) }\n    var selectedDate by remember { mutableStateOf(\"\") }\n\n    if (showSheet) {\n        CxWheelTimePicker(modifier = Modifier.fillMaxWidth(),\n            titleStyle = TextStyle(\n                fontSize = 16.sp,\n                lineHeight = 18.sp,\n                fontWeight = FontWeight(600),\n                color = Color(0xFF333333),\n                textAlign = TextAlign.Center,\n            ),\n            doneLabelStyle = TextStyle(\n                fontSize = 16.sp,\n                lineHeight = 18.sp,\n                fontWeight = FontWeight(400),\n                textAlign = TextAlign.Center,\n                color = Color(0xFF007AFF),\n            ),\n            textColor = Color(0xff007AFF),\n            timeFormat = TimeFormat.AM_PM,\n            selectorProperties = WheelPickerDefaults.selectorProperties(\n                borderColor = Color.LightGray,\n            ),\n            rowCount = 5,\n            size = DpSize(128.dp, 160.dp),\n            textStyle = TextStyle(\n                fontWeight = FontWeight(600),\n            ),\n            onDismiss = {\n                showSheet = false\n            },\n            onDoneClick = {\n                selectedDate = timeToString(it, \"hh:mm a\")\n                showSheet = false\n            })\n    }\n\n    Surface(\n        modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background\n    ) {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .height(200.dp),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Button(onClick = {\n                showSheet = true\n            }) {\n                Text(text = \"Show BottomSheet\")\n            }\n            Text(\n                text = selectedDate,\n                style = MaterialTheme.typography.titleMedium,\n                color = Color.Black,\n                textAlign = TextAlign.Center,\n                modifier = Modifier\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"Usage/#cxsimplebottomnav","title":"CxSimpleBottomNav","text":"<pre><code> private val screen = listOf(\n    SimpleBottomNavItem(\n        icon = lucide.house, title = \"Home\"\n    ), SimpleBottomNavItem(\n        icon = lucide.search, title = \"Search\"\n    ), SimpleBottomNavItem(\n        icon = lucide.message_square, title = \"Chat\"\n    ), SimpleBottomNavItem(\n        icon = lucide.user_round, title = \"Profile\"\n    )\n)\n\n@Composable\nfun CxBottomNavDemo() {\n\n    CenterBox {\n\n\n        CxSimpleBottomNav(\n            screens = screen,\n            height = 80.dp,\n            backgroundColor = Color(0xFFF1F1F1),\n            selectedColor = Color(0xFF007AFF),\n            unSelectedColor = Color(0XFF89788B),\n            iconSize = 28.dp,\n            selectedTextStyle = TextStyle(\n                fontFamily = FontFamily.SansSerif, fontWeight = FontWeight.Bold\n            ),\n            unselectedTextStyle = TextStyle(\n                fontFamily = FontFamily.SansSerif\n            )\n        )\n\n\n\n\n        CxSimpleBottomNav(\n            modifier = Modifier.padding(horizontal = 18.dp, vertical = 12.dp),\n            screens = screen,\n            showDash = true,\n            height = 80.dp,\n            backgroundColor = Color(0xFF0B264F),\n            selectedColor = Color(0xFFFFBB4E),\n            unSelectedColor = Color(0XFFE3E3E3),\n            iconSize = 28.dp,\n            selectedTextStyle = TextStyle(\n                fontFamily = FontFamily.SansSerif, fontWeight = FontWeight.Bold\n            ),\n            unselectedTextStyle = TextStyle(\n                fontFamily = FontFamily.SansSerif\n            ),\n            shape = RoundedCornerShape(50.dp)\n        )\n\n        CxSimpleBottomNav(\n            screens = screen,\n            showDot = true,\n            height = 80.dp,\n            backgroundColor = Color(0xFF222222),\n            selectedColor = Color(0xFF73D3BB),\n            unSelectedColor = Color(0XFFFFFFFF),\n            iconSize = 28.dp,\n            dotBottomPadding = 3.dp,\n            selectedTextStyle = TextStyle(\n                fontFamily = FontFamily.SansSerif, fontWeight = FontWeight.Bold\n            ),\n            unselectedTextStyle = TextStyle(\n                fontFamily = FontFamily.SansSerif\n            ),\n            shape = RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp)\n        )\n\n    }\n\n\n}\n</code></pre>"},{"location":"Usage/#cxrollereffecttext","title":"CxRollerEffectText","text":"<pre><code> @Composable\nfun RollerEffectTextDemo() {\n    var count by remember {\n        mutableIntStateOf(0)\n    }\n\n    CxRollerEffectText(\n        count = count,\n        style = TextStyle(\n            color = Color(0xFF3E3E3E),\n            fontSize = 32.sp\n        ),\n        modifier = Modifier.clickable{\n            count-=1\n        }\n    )\n\n\n    Button(\n        colors = ButtonDefaults.buttonColors(\n            containerColor = Color(0xFF4579FF)\n        ),\n        shape = RoundedCornerShape(8.dp),\n        onClick = {\n            count++\n        }\n    ) {\n        Text(\n            text = \"Increment\",\n            color = Color.White,\n            fontSize = 16.sp\n        )\n    }\n}\n</code></pre>"},{"location":"Usage/#cxtypewritertext","title":"CxTypeWriterText","text":"<pre><code> @Composable\nfun TypewriterTextDemo() {\n\n        val texts = listOf(\n            \"Welcome to my app!\",\n            \"This is a cool typing effect\",\n            \"With multiple features...\"\n        )\n\n        CxTypewriterText(\n            texts = texts,\n            textStyle = TextStyle(\n                fontSize = 24.sp,\n                fontWeight = FontWeight.Medium,\n                color = MaterialTheme.colorScheme.onSurface\n            ),\n            typingSpeed = 100,\n            delayBetweenTexts = 2000,\n            onTextComplete = { index -&gt;\n                println(\"Completed typing text #${index + 1}\")\n            },\n            onAllTextsComplete = {\n                println(\"All texts have been displayed!\")\n            }\n        )\n\n}\n</code></pre>"},{"location":"Usage/#cxrangeslider","title":"CxRangeSlider","text":"<pre><code> @Composable\nfun CxRangeSliderDemo() {\n    CxRangeSliderWithPin(\n        modifier = Modifier\n            .padding(horizontal = 48.dp)\n            .fillMaxWidth(),\n        trackInActiveColor = Color(0xFFFACBD9),\n        trackColor = Color(0xffEF286D),\n        startPinCircleColor = Color(0xFFEF286D),\n        endPinCircleColor = Color(0xFFEF286D),\n        startPinColor = Color(0xFFEF286D),\n        endPinColor = Color(0xFFEF286D),\n        startPinTextStyle = TextStyle(\n            fontSize = 16.sp,\n            color = Color.White,\n            fontFamily = FontFamily.SansSerif,\n            fontWeight = FontWeight.Bold\n        ),\n        endPinTextStyle = TextStyle(\n            fontSize = 16.sp,\n            color = Color.White,\n            fontFamily = FontFamily.SansSerif,\n            fontWeight = FontWeight.Bold\n        ),\n        trackThickness = 4.dp,\n        pinCircleSize = 10.dp,\n        startProgress = 10f,\n        endProgress = 50f,\n        pinSpacing = 16.dp,\n        pinWidth = 40.dp,\n        pinHeight = 40.dp\n    ) { startProgressValue, endProgressValue -&gt;\n\n    }\n}\n</code></pre>"},{"location":"Usage/#cxprogress","title":"CxProgress","text":"<pre><code> Column{\n\n CxOrbitLoading()\n CxPulseLoading()\n CxNeonProgressLoader()\n\n }\n</code></pre>"},{"location":"Usage/#cxmultisteploader","title":"CxMultiStepLoader","text":"<pre><code> @Composable\nfun CxMultiStepLoaderDemo() {\n    Box(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(Color.Black)\n    ) {\n        CxMultiStepLoader(\n            modifier = Modifier\n                .fillMaxSize(),\n            size = 100.dp,\n            strokeWidth = 16.dp,\n            spacing = 5.dp,\n            progressList = listOf(\n                ProgressItem(\n                    tag = \"Calories\",\n                    progressColor = Color(0xFF00D4D6),\n                    trackColor = Color(0xFF001D23),\n                    progress = 70f,\n                    animDuration = 1000\n                ),\n                ProgressItem(\n                    tag = \"Steps\",\n                    progressColor = Color(0xFF74F400),\n                    trackColor = Color(0xFF002200),\n                    progress = 60f,\n                    animDuration = 2000\n                ),\n                ProgressItem(\n                    tag = \"Distance\",\n                    progressColor = Color(0xFFF45E9F),\n                    trackColor = Color(0x992C0308),\n                    progress = 50f,\n                    animDuration = 3000\n                ),\n\n            )\n        )\n    }\n}\n</code></pre>"},{"location":"Usage/#cxindicators","title":"CxIndicators","text":"<pre><code>     CxIndicators(\n                count = 5,\n                size = 45,\n                spacer = 4,\n                selectedIndex = 0,\n                selectedColor = Cx.blue700,\n                unselectedColor = Cx.gray500\n            ) {\n                // Handle click event\n            }\n</code></pre>"},{"location":"Usage/#cxexposeddropdownmenu","title":"CxExposedDropdownMenu","text":"<pre><code> @Composable\nfun ExposedDropdownDemo(modifier: Modifier = Modifier) {\n    Column(\n        Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n\n        val list = remember { listOf(\"Item 1\", \"Item 2\", \"Item 3\") }\n        var text by remember { mutableStateOf(\"\") }\n\n        text.text.make()\n        Gap(30)\n        CxExposedDropdownMenu(list) { string, int -&gt;\n            text = \"$string\\nIndex:$int\"\n        }\n\n\n\n    }\n}\n</code></pre>"},{"location":"Usage/#cxexpandablecard","title":"CxExpandableCard","text":"<pre><code> @Composable\nfun ExpandableCardDemo() {\n\n    Column { \n\n    // Standalone usage\n    val state = rememberCxExpandableCardState()\n    CxExpandableCard(\n        title = \"My Card\",\n        state = state\n    ) {\n        \"This is the content of the card\".text.make()\n        Gap(10)  \n        \"This is the content of the card\".text.make()\n        Gap(10)\n    }\n\n        Gap(10)\n    HorizontalDivider(modifier = Modifier.fillMaxWidth().height(2.dp).background(Color.Gray))\nGap(10)\n// As part of a group\n    val groupState = rememberCxExpandableCardGroupState(count = 3)\n    CxExpandableCard(\n        title = \"Card 1\",\n        state = groupState.getState(0)\n    ) {\n        \"This is the content of the card\".text.make()\n        Gap(10)\n        \"This is the content of the card\".text.make()\n        Gap(10)\n    }\n\n\n        Gap(10)\n        CxExpandableCard(\n            title = \"Card 2\",\n            state = groupState.getState(1)\n        ) {\n            \"This is the content of the card\".text.make()\n            Gap(10)\n            \"This is the content of the card\".text.make()\n            Gap(10)\n        }\n\n        Gap(10)\n\n        CxExpandableCard(\n            title = \"Card 3\",\n            state = groupState.getState(2)\n        ) {\n            \"This is the content of the card\".text.make()\n            Gap(10)\n            \"This is the content of the card\".text.make()\n            Gap(10)\n        }\n\n}\n    }\n</code></pre>"},{"location":"Usage/#cxexpandingfav","title":"CxExpandingFav","text":"<pre><code> @Composable\nfun ExpandingFavDemo() {\n    var fabState by remember { mutableStateOf&lt;FABState&gt;(FABState.Collapsed) }\n\n    Box(\n        modifier = Modifier\n            .width(200.dp)\n            .height(400.dp),\n        contentAlignment = Alignment.BottomEnd\n    ) {\n        CxExpandingFav(\n            modifier = Modifier\n                .wrapContentSize(),\n            fabList = listOf(\n                CxFABItem(\n                    iconRes = lucide.plus, // Replace with your own drawables\n                    iconSize = 42.dp,\n                    label = \"Write\",\n\n                    labelStyle = TextStyle(\n                        fontSize = 20.sp,\n                        fontWeight = FontWeight.Bold\n                    ),\n                    onClick = {\n\n                    }\n                ),\n                CxFABItem(\n                    iconRes = lucide.youtube, // Replace with your own drawables\n                    iconSize = 42.dp,\n                    label = \"Media\",\n                    color = Color.Black,\n                    labelStyle = TextStyle(\n                        fontSize = 20.sp,\n                        fontWeight = FontWeight.Bold\n                    ),\n                    onClick = {\n\n                    }\n                ),\n                CxFABItem(\n                    iconRes = lucide.mic, // Replace with your own drawables\n                    iconSize = 42.dp,\n                    label = \"Speak\",\n                    color = Color.Black,\n                    labelStyle = TextStyle(\n                        fontSize = 20.sp,\n                        fontWeight = FontWeight.Bold\n                    ),\n                    onClick = {\n\n                    }\n                )\n            ),\n            fabText = \"Create Article\",\n            fabTextStyle = TextStyle(\n                fontFamily = FontFamily.SansSerif,\n                fontWeight = FontWeight.Bold,\n                fontSize = 18.sp\n            ),\n            fabState = fabState,\n            itemSpacing = 18.dp,\n            onClick = {\n                fabState = fabState.toggleValue()\n            }\n        )\n    }\n}\n</code></pre>"},{"location":"Usage/#cxedittext","title":"CxEditText","text":"<pre><code> @Composable\nfun EditTextDemo(modifier: Modifier = Modifier) {\n    Column(Modifier.fillMaxSize()) {\n\n        var name by remember { mutableStateOf(\"\") }\n        CxEditText(\n            value = name,\n            label = \"Name\",\n            onValueChange = { name = it }\n        )\n\n        Gap(20)\n\n        CxEditText(\n            value = name,\n            label = \"Password\",\n            colors = TextFieldDefaults.colors(\n                unfocusedIndicatorColor = Color.Transparent,\n                focusedIndicatorColor = Color.Transparent,\n                focusedContainerColor = MaterialTheme.colorScheme.surfaceContainerHighest,\n                unfocusedContainerColor = MaterialTheme.colorScheme.surfaceContainerLow,\n                focusedTextColor = MaterialTheme.colorScheme.onSurface,\n                unfocusedTextColor = MaterialTheme.colorScheme.onSurfaceVariant\n            ),\n            shape = RoundedCornerShape(20),\n            keyboardType = KeyboardType.Password,\n        ){\n            name = it\n        }\n\n        var address by remember { mutableStateOf(\"\") }\n        CxEditText(\n            value = address,\n            label = \"Address\",\n            shape = RoundedCornerShape(12.dp),\n            colors = TextFieldDefaults.colors(\n                focusedIndicatorColor = Color.Transparent,\n                unfocusedIndicatorColor = Color.Transparent,\n                focusedContainerColor = MaterialTheme.colorScheme.surfaceVariant,\n                unfocusedContainerColor = MaterialTheme.colorScheme.surfaceVariant,\n                focusedTextColor = MaterialTheme.colorScheme.onSurface,\n                unfocusedTextColor = MaterialTheme.colorScheme.onSurfaceVariant\n            ),\n            leadingIcon = lucide.map,\n            onValueChange = { address = it }\n        )\n\n\n\n        CxEditText(\n            value = name,\n            label = \"Phone Number\",\n            shape = RoundedCornerShape(0.dp),\n            colors = TextFieldDefaults.colors(\n                focusedIndicatorColor = Color.Transparent,\n                unfocusedIndicatorColor = Color.Transparent,\n                focusedContainerColor = Color.Transparent,\n                unfocusedContainerColor = Color.Transparent,\n                focusedTextColor = MaterialTheme.colorScheme.primary,\n                unfocusedTextColor = MaterialTheme.colorScheme.onSurface\n            ),\n            keyboardType = KeyboardType.Phone,\n            onValueChange = { name = it }\n        )\n\n\n\n        CxEditText(\n            value = name,\n            label = \"Username\",\n            shape = RoundedCornerShape(8.dp),\n            colors = TextFieldDefaults.colors(\n                focusedIndicatorColor = MaterialTheme.colorScheme.primary,\n                unfocusedIndicatorColor = MaterialTheme.colorScheme.onSurfaceVariant,\n                focusedContainerColor = Color.Transparent,\n                unfocusedContainerColor = Color.Transparent\n            ),\n            leadingIcon = lucide.at_sign,\n            onValueChange = { name = it }\n        )\n\n\n        CxEditText(\n            value = name,\n            label = \"Password\",\n            shape = RoundedCornerShape(20.dp),\n            keyboardType = KeyboardType.Password,\n            colors = TextFieldDefaults.colors(\n                unfocusedIndicatorColor = Color.Transparent,\n                focusedIndicatorColor = Color.Transparent,\n                focusedContainerColor = MaterialTheme.colorScheme.surfaceContainerHighest,\n                unfocusedContainerColor = MaterialTheme.colorScheme.surfaceContainerLow,\n                focusedTextColor = MaterialTheme.colorScheme.onSurface,\n                unfocusedTextColor = MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        ) {\n            name = it\n        }\n\n\n\n    }\n}\n</code></pre>"},{"location":"Usage/#cxcontactlist","title":"CxContactList","text":"<pre><code> @Composable\nfun ContactListDemo() {\n    val names =\n        \"Aurora, Aria, Asher, Benjamin, Bianca, Beatrix, Caleb, Clara, Chloe, Daniel, Delilah, Diana, Elijah, Emily, Evangeline, Finnegan, Freya, Fiona, Gabriel, Grace, Gwendolyn, Henry, Harper, Helena, Isaac, Isabella, Ivy, James, Jasmine, Juliette, Kieran, Katherine, Kai, Liam, Lily, Luna, Mason, Madison, Maya, Noah, Natalie, Nora, Oliver, Olivia, Octavia, Peter, Penelope, Phoebe, Quentin, Quinn, Ryan, Rachel, Rose, Samuel, Sophia, Scarlett, Thomas, Taylor, Thea, Uriah, Uma, Victor, Violet, Vanessa, William, Willow, Wren, Xavier, Xena, Yasmine, Yara, Zachary, Zoe, Zara\"\n    val contacts = names.split(\", \").map { Contact(it,lucide.user_round) }\n\n    CxContactList(\n        contacts = contacts,\n        scrollingBubbleColor = Color(0xFF73D3BB),\n        scrollingBubbleTextStyle = MaterialTheme.typography.titleLarge.copy(\n            fontSize = 18.sp,\n            color = Color.White,\n        ),\n        alphabetScrollerTextStyle = TextStyle(\n            fontSize = 11.sp,\n            lineHeight = 21.sp,\n            fontWeight = FontWeight(400),\n            color = Color(0xFFB5B5B5),\n            textAlign = TextAlign.Center,\n        ),\n        charStyle = TextStyle(\n            fontSize = 20.sp,\n            fontWeight = FontWeight(400),\n            color = Color(0xFF8B37F7),\n        ),\n        nameTextStyle = TextStyle(\n            fontSize = 18.sp,\n            fontWeight = FontWeight(500),\n            color = Color(0xFF333333),\n        ),\n        iconSize = 46.dp\n    )\n}\n</code></pre>"},{"location":"Usage/#cxcoloredeffecttext","title":"CxColoredEffectText","text":"<pre><code> @Composable\nfun ColorEffectTextDemo() {\n    CxColorEffectText(\n        text = \"Don\u2019t allow people to dim your shine because they are blinded.\",\n        textStyle = TextStyle(\n            fontFamily = FontFamily.SansSerif,\n            fontSize = 24.sp,\n            fontWeight = FontWeight.Bold,\n            textAlign = TextAlign.Center\n        ),\n        colors = listOf(\n            Color(0xFFD79B63),\n            Color(0xFF58B9E6),\n            Color(0xFF6D7AE0),\n            Color(0xFFB962EE)\n        )\n    )\n}\n</code></pre>"},{"location":"Usage/#cxiconcheck","title":"CxIconCheck","text":"<pre><code> /*** Simple Checkbox ***/\n@Composable\nfun IconCheckBoxDemo() {\n    val checkedState = remember { mutableStateOf(false) }\n\n    CxIconCheckBox(\n        isChecked = checkedState.value,\n        checkedIcon = lucide.smile,\n        unCheckedIcon = lucide.angry,\n        onCheckedChange = {\n            checkedState.value = !checkedState.value\n        }\n    )\n}\n\n/*** Checkbox With Label ***/\n@Composable\nfun CheckboxWithLabelDemo() {\n    val checkedState = remember { mutableStateOf(false) }\n\n    CxIconCheckBoxWithLabel(\n        isChecked = checkedState.value,\n        checkedIcon = lucide.smile,\n        unCheckedIcon = lucide.annoyed,\n        onCheckedChange = {\n            checkedState.value = !checkedState.value\n        }\n    )\n}\n\n/*** Grouped Checkbox ***/\n@Composable\nfun GroupedCheckboxDemo() {\n    CxIconCheckBoxGrouped(\n        options = listOf(\"Option 1\", \"Option 2\", \"Option 3\"),\n        checkedIcon = lucide.check,\n        unCheckedIcon = lucide.dot,\n        onSelectionChange = {\n\n        }\n    )\n}\n</code></pre>"},{"location":"Usage/#cxotpview","title":"CxOtpView","text":"<pre><code> @Composable\nfun OtpViewDemo() {\n    var otpValue by remember {\n        mutableStateOf(\"\")\n    }\n    var showOtp by remember {\n        mutableStateOf(false)\n    }\n\n    Column(\n        verticalArrangement = Arrangement.spacedBy(12.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        CxOtpView(\n            otpText = otpValue,\n            otpCount = 6,\n            showOtp = showOtp,\n            showError = false,\n            textStyle = TextStyle(\n                fontFamily = FontFamily.SansSerif,\n                fontWeight = FontWeight.Bold\n            ),\n            textColor = Color.Black,\n            backgroundColor = Color.Transparent,\n            textSize = 16.sp\n        ) { text -&gt;\n            otpValue = text\n        }\n\n\n        Button(\n            onClick = {\n                showOtp = !showOtp\n            }\n        ) {\n            Text(\n                text = if (showOtp) {\n                    \"Hide OTP\"\n                } else {\n                    \"Show OTP\"\n                }\n            )\n        }\n\n        val context = LocalContext.current\n        AnimatedVisibility(otpValue.length==6) {\n            Button(onClick = {\n                \"Submitted OTP: $otpValue\".toast(context)\n                otpValue = \"\"\n            }) { Text(\"Submit\") }\n        }\n    }\n}\n</code></pre>"},{"location":"Usage/#cxpicker","title":"CxPicker","text":"<pre><code> @Composable\nfun CxPicker() {\n    Column(\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center,\n        modifier = Modifier\n    ) {\n        val values = remember { (1..9999).map { it.toString() } }\n        val valuesPickerState = rememberPickerState()\n\n        CxPicker(\n            state = valuesPickerState,\n            items = values,\n            visibleItemsCount = 5,\n            modifier = Modifier.fillMaxWidth(0.5f),\n            textModifier = Modifier.padding(8.dp),\n            textStyle = TextStyle(fontSize = 32.sp),\n            dividerColor = Color(0xFFE8E8E8)\n        )\n\n        Text(\n            text = \"Result: ${valuesPickerState.selectedItem}\",\n            textAlign = TextAlign.Center,\n            fontWeight = FontWeight(500),\n            fontSize = 20.sp,\n            modifier = Modifier\n                .padding(vertical = 16.dp)\n                .fillMaxWidth(0.5f)\n                .background(color = Color(0xFFF5F5F5), shape = RoundedCornerShape(size = 8.dp))\n                .padding(vertical = 10.dp, horizontal = 16.dp)\n        )\n    }\n}\n</code></pre>"},{"location":"Usage/#cxcoloredshadow","title":"CxColoredShadow","text":"<pre><code> @Composable\nfun ColoredShadowDemo() {\n\n    Column {\n\n    \"Hello World\".text.modifier(Modifier.coloredShadow(Color.Red)).make()\n\n        Gap(10)\n    \"Hello World\".text.modifier(Modifier.coloredShadow(\n        color = Color.Blue,\n        alpha = .3f,\n        borderRadius = 10,\n        shadowRadius = 15\n    )).make()\n\n    }\n}\n</code></pre>"},{"location":"Usage/#cxlifecyclemanager","title":"CxLifecycleManager","text":"<pre><code> @Composable\nfun LifecycleExample() {\n\n\n    CxLifecycleManager(onStart = { println(\"\u25b6\ufe0f Component started\") },\n        onResume = { println(\"\u2733\ufe0f Component resumed\") },\n        onPause = { println(\"\u23f8\ufe0f Component paused\") },\n        onStop = { println(\"\u23f9\ufe0f Component stopped\") },\n        onRestart = { println(\"\ud83d\udd04 Component restarted\") },\n        onDestroy = { println(\"\ud83d\udca2 Component destroyed\") },\n        onDispose = { println(\"\ud83d\uddd1\ufe0f Component disposed\") })\n}\n</code></pre>"},{"location":"Usage/#cxencryption","title":"CxEncryption","text":"<pre><code>             val aes = remember { CxEncryption(\n                secretKey = \"secretKey\"\n            ) }\n\n            val encrypted = aes.encrypt(\"Hello World\")\n\n            val decrypted = aes.decrypt(encrypted)\n</code></pre>"},{"location":"Usage/#cxfilepicker","title":"CxFilePicker","text":"<pre><code>@Composable\nfun CxFilePickerDemo(modifier: Modifier = Modifier) {\n\n\n    val selectedImage = remember { mutableStateOf&lt;Uri?&gt;(null) }\n\n    // Picking single image\n    val imagePicker = rememberCxFilePicker(PickerType.Single(FileType.Image)){uris -&gt;\n        //? since we are picking single image, we can safely assume that the first uri in the list is the selected image\n        if (uris.isNotEmpty()){\n            selectedImage.value = uris[0]\n        }\n\n    }\n\n    // Picking multiple images\n    val videPicker = rememberCxFilePicker(PickerType.Multiple(FileType.Video)){uris: List&lt;Uri&gt; -&gt;\n        //? handle multiple images here\n    }\n\n    // Collecting picked videos through flow\n    val pickedVideos = videPicker.pickedFilesFlow.collectAsStateWithLifecycle()\n\n\n    CxButton(\"Pick Image\") {\n        imagePicker.pick()\n    }\n\n    val scope = rememberCoroutineScope()\n    CxButton(\"Pick Video\") {\n      scope.launch {\n          val list = videPicker.pickAwait()\n          // using coroutine scope to call pickAwait() function\n      }\n    }\n\n\n\n}\n</code></pre>"},{"location":"Usage/#cxexpandablefab","title":"CxExpandableFab","text":"<pre><code>@Composable\nfun CxExpandableFabDemo(modifier: Modifier = Modifier) {\n\n    val itemList = remember { \n        listOf(\n            CxFabItem(iconResId = lucide.shopping,\"Shopping\"){/*handle click*/},\n            CxFabItem(iconResId = lucide.ruler,\"Ruler\"){/*handle click*/},\n            CxFabItem(iconResId = lucide.check,\"Check\"){/*handle click*/},\n        )\n    }\n\n   CxExpandableFab(\n       items = itemList,\n       icon = lucide.plus,\n   )\n\n\n}\n</code></pre>"},{"location":"Usage/#cxcolorextension","title":"CxColorExtension","text":"<pre><code>Cx.blue700\nCx.red50,\nCx.yellow100\n// etc.........\n</code></pre>"},{"location":"Usage/#cxstringextension","title":"CxStringExtension","text":"<pre><code> fun main() {\n    val sampleString = \"hello World 123\"\n\n    // firstLetterUpperCase()\n    println(sampleString.firstLetterUpperCase()) // \"Hello world 123\"\n\n    // eliminateFirst()\n    println(sampleString.eliminateFirst()) // \"ello World 123\"\n\n    // eliminateLast()\n    println(sampleString.eliminateLast()) // \"hello World 12\"\n\n    // isEmpty\n    println(sampleString.isEmpty) // false\n\n    // validateEmail()\n    val email = \"test@example.com\"\n    println(email.validateEmail()) // true\n\n    // isRtlLanguage()\n    println(sampleString.isRtlLanguage()) // false\n\n    // orEmpty\n    val nullString: String? = null\n    println(nullString.orEmpty) // \"\"\n\n    // ifEmpty()\n    println(\"\".ifEmpty { \"Empty String\" }) // \"Empty String\"\n    println(\"Not empty\".ifEmpty { \"Empty String\" }) // \"Not empty\"\n\n    // removeAllWhiteSpace()\n    println(\"hello   World\".removeAllWhiteSpace()) // \"helloWorld\"\n\n    // isNotBlank\n    println(sampleString.isNotBlank) // true\n\n    // hidePartial()\n    println(sampleString.hidePartial(0, 5)) // \"***** World 123\"\n\n    // numCurrency\n    println(\"1234.56\".numCurrency) // \"$1,234.56\"\n\n    // numCurrencyWithLocale()\n    println(\"1234.56\".numCurrencyWithLocale(Locale.UK)) // \"\u00a31,234.56\"\n\n    // allWordsCapitalize()\n    println(\"hello world\".allWordsCapitalize()) // \"Hello World\"\n\n    // compareToIgnoringCase()\n    println(\"hello\".compareToIgnoringCase(\"HELLO\")) // 0\n\n    // insert()\n    println(sampleString.insert(\"Java\", 6)) // \"hello JavaWorld 123\"\n\n    // prepend()\n    println(sampleString.prepend(\"Hi, \")) // \"Hi, hello World 123\"\n\n    // reverse()\n    println(sampleString.reverse()) // \"321  dlroW olleh\"\n\n    // isCreditCardValid()\n    val cardNumber = \"4532015112830366\"\n    println(cardNumber.isCreditCardValid()) // true\n\n    // isNumber()\n    println(\"1234.56\".isNumber()) // true\n    println(\"hello\".isNumber()) // false\n\n    // isDigit()\n    println(\"5\".isDigit()) // true\n    println(\"12\".isDigit()) // false\n\n    // isLetter()\n    println(\"a\".isLetter()) // true\n    println(\"1\".isLetter()) // false\n\n    // isSymbol()\n    println(\"!\".isSymbol()) // true\n    println(\"A\".isSymbol()) // false\n\n    // filterChars()\n    println(\"hello!@#world\".filterChars()) // \"helloworld\"\n\n    // toDate()\n    val dateString = \"2025-02-13\"\n    println(dateString.toDate()) // \"Wed Feb 13 00:00:00 GMT 2025\"\n\n    // toDateString()\n    println(dateString.toDateString()) // \"February 13, 2025\"\n\n    // lowerCamelCase\n    println(\"hello_world_example\".lowerCamelCase) // \"helloWorldExample\"\n\n    // upperCamelCase\n    println(\"hello_world_example\".upperCamelCase) // \"HelloWorldExample\"\n\n    // capitalized\n    println(\"hello\".capitalized) // \"Hello\"\n\n    // snakeCase\n    println(\"HelloWorld\".snakeCase) // \"hello_world\"\n\n    // toEncodedBase64 (Requires API Level 26)\n    // println(\"Hello\".toEncodedBase64()) // \"SGVsbG8=\"\n\n    // toDecodedBase64 (Requires API Level 26)\n    // println(\"SGVsbG8=\".toDecodedBase64()) // \"Hello\"\n\n    // utf8ToList\n    println(\"Hello\".utf8ToList) // [72, 101, 108, 108, 111]\n\n    // utf8Encode\n    println(\"Hello\".utf8Encode.joinToString()) // \"72, 101, 108, 108, 111\"\n\n    // formatDigitPattern\n    println(\"1234567890\".formatDigitPattern(4)) // \"1234 5678 90\"\n\n    // formatDigitPatternEnd\n    println(\"1234567890\".formatDigitPatternEnd(4)) // \"1234 5678 90\"\n}\n</code></pre>"}]}